import json
import os
import logging
import asyncio
import argparse
import re
from datetime import datetime
from pathlib import Path
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler
)
import random

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à OpenAI SDK, –∫–∞–∫ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
import openai
from openai import OpenAI

# –§–∞–π–ª—ã
USERS_FILE = "users.json"
INFO_FILE = "info.json"
LOGS_DIR = "logs"
INFO_ABOUT_WORLD_FILE = "info_about_world.json"

# ID –≤–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ OpenAI
ASSISTANT_ID = "asst_VxE0V10Gi7Q3EXRIFvUSbqTp"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_NAME = 1

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—â–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
general_logger = logging.getLogger('general')
general_logger.setLevel(logging.INFO)
general_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'general.log'), encoding='utf-8')
general_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
general_logger.addHandler(general_handler)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
OPERATIONS_LOG = "operations.log"
def log_operation(text):
    with open(OPERATIONS_LOG, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {text}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_logger(user_id: str, user_name: str) -> logging.Logger:
    logger = logging.getLogger(f'user_{user_id}')
    if not logger.handlers:
        handler = logging.FileHandler(
            os.path.join(LOGS_DIR, f'user_{user_id}_{user_name}.log'),
            encoding='utf-8'
        )
        handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
    return logger

# ------------------------------------------------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ------------------------------------------------------------------------------
def load_data(file_path):
    if not Path(file_path).exists():
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        if file_path == INFO_FILE:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump({"0": [], "1": [], "2": [], "3": [], "4": [], "5": []}, f, ensure_ascii=False, indent=4)
        else:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump({}, f, ensure_ascii=False, indent=4)
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)


def save_data(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


users = load_data(USERS_FILE)
info = load_data(INFO_FILE)


# ------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
# ------------------------------------------------------------------------------
def get_user(user_id: str):
    return users.get(user_id)


def create_user(user_id: str, name: str):
    users[user_id] = {
        "name": name,
        "balance": 0,
        "thread_id": None
    }
    save_data(USERS_FILE, users)
    return users[user_id]


def update_balance(user_id: str, amount: int):
    users[user_id]["balance"] += amount
    save_data(USERS_FILE, users)


# –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ info: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> –º–∞—Å—Å–∏–≤—ã –∏–Ω—Ñ—ã
CATEGORY_NAMES = {
    "0": "–û –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö (–æ—Ç –æ—Å–æ–±–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)",
    "1": "–û –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö",
    "2": "–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–ª—à–µ–±–Ω–∏–∫–∞—Ö –∏–ª–∏ –∏—Ö –≥—Ä—É–ø–ø–∞—Ö",
    "3": "–û –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤–∞—Ö",
    "4": "–û –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö",
    "5": "–ü—Ä–æ—á–∏–µ –∑–Ω–∞–Ω–∏—è"
}

def get_categories_with_counts():
    """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–π."""
    return [
        {"id": cat_id, "name": CATEGORY_NAMES.get(cat_id, cat_id), "count": len(info[cat_id])}
        for cat_id in info.keys()
    ]

def add_info(category_id, user_id, user_name, description, details, cost, cost_name="—à—Ç—É–∫–∞—Ä–∏–∫–∏"):
    if category_id == 0:
        raise Exception("–í –∫–∞—Ç–µ–≥–æ—Ä–∏—é 0 –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –û—Å–æ–±—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–µ—Ç.")
    # id –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    new_id = 1
    if info[str(category_id)]:
        new_id = max(item["id"] for item in info[str(category_id)]) + 1
    info[str(category_id)].append({
        "id": new_id,
        "description": description,
        "details": details,
        "cost": cost,
        "cost_name": cost_name,
        "seller_id": user_id,
        "seller_name": user_name
    })
    save_data(INFO_FILE, info)
    return new_id


def handle_show_items(category_id):
    if str(category_id) not in info:
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å id {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    return [
        {"id": item["id"], "description": item["description"], "cost": item["cost"], "cost_name": item.get("cost_name", "—à—Ç—É–∫–∞—Ä–∏–∫–∏")}
        for item in info[str(category_id)]
    ]


def handle_buy_item(user_id, category_id, item_id):
    if str(category_id) not in info:
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å id {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    item = next((x for x in info[str(category_id)] if x["id"] == item_id), None)
    if not item:
        return "Item not found."
    user = get_user(user_id)
    if user["balance"] < item["cost"]:
        return "Insufficient balance."
    update_balance(user_id, -item["cost"])
    log_operation(f'{user["name"]} ({user_id}) –∫—É–ø–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {item["description"]} ({item["details"]}), –∑–∞ {item["cost"]} {item.get("cost_name", "—à—Ç—É–∫–∞—Ä–∏–∫–∏")}.')
    return item["details"]


def handle_sell_item(user_id, description, details, cost, category_id, cost_name="—à—Ç—É–∫–∞—Ä–∏–∫–∏"):
    if str(category_id) not in info:
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å id {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if category_id == 0:
        return "–í –∫–∞—Ç–µ–≥–æ—Ä–∏—é 0 –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –û—Å–æ–±—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–µ—Ç."
    user = get_user(user_id)
    –ø–æ—è—Å–Ω–µ–Ω–∏—è = []
    orig_cost = cost
    if cost > 3:
        cost = 3
        –ø–æ—è—Å–Ω–µ–Ω–∏—è.append("(–Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –¥–æ—Ä–æ–∂–µ 3 –∫—Ä–µ–¥–∏—Ç–æ–≤, —Ü–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞)")
    if cost < 1:
        cost = 1
        –ø–æ—è—Å–Ω–µ–Ω–∏—è.append("(–Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –¥–µ—à–µ–≤–ª–µ 1 –∫—Ä–µ–¥–∏—Ç–∞, —Ü–µ–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞)")
    if len(details) < 200:
        return "–û–®–ò–ë–ö–ê: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    new_id = add_info(category_id, user_id, user["name"], description, details, cost, cost_name)
    update_balance(user_id, cost)
    log_operation(f'{user["name"]} ({user_id}) –ø—Ä–æ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {description} ({details}), –∑–∞ {cost} {cost_name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}, id {new_id}).')
    –ø–æ—è—Å–Ω–µ–Ω–∏–µ = " ".join(–ø–æ—è—Å–Ω–µ–Ω–∏—è)
    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ {cost} {cost_name}. {–ø–æ—è—Å–Ω–µ–Ω–∏–µ} –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']} {cost_name}."


def handle_get_purchased_items(user_id):
    # –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    purchased = []
    for cat_id, items in info.items():
        for item in items:
            if item.get("buyer_id") == user_id:
                purchased.append({
                    "description": item["description"],
                    "details": item["details"]
                })
    return purchased

async def show_category_to_user(category_id, user_id, context):
    if str(category_id) not in info:
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    category_name = CATEGORY_NAMES.get(str(category_id), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}")
    items = info[str(category_id)]
    if not items:
        return f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    message_lines = [f"üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':</b>\n"]
    for i, item in enumerate(items, 1):
        cost_name = item.get("cost_name", "—à—Ç—É–∫–∞—Ä–∏–∫–∏")
        message_lines.append(
            f"{i}. <b>{item['description']}</b>\n"
            f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost']} {cost_name}\n"
        )
    message_text = "\n".join(message_lines)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode='HTML'
        )
        return f"–°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞: {str(e)}"



def get_random_info_about_world():
    try:
        with open(INFO_ABOUT_WORLD_FILE, "r", encoding="utf-8") as f:
            facts = json.load(f)
        if not isinstance(facts, list) or not facts:
            return "–ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –æ –º–∏—Ä–µ."
        return random.choice(facts)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞ –æ –º–∏—Ä–µ: {e}"
# ------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI Threads
# ------------------------------------------------------------------------------
def add_message_to_thread(client, thread_id, role, content, user_id=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫."""
    user_info = ""
    if user_id:
        user = get_user(user_id)
        user_info = f" ({user['name']}, –±–∞–ª–∞–Ω—Å: {user['balance']})"
    message_content = f"{content}{user_info}"
    logging.info(f"Adding message to thread {thread_id}: {role} - {message_content}")
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role=role,
        content=message_content
    )


def submit_tool_outputs(client, thread_id, run_id, tool_outputs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤' (tool calls) –≤ –ø–æ—Ç–æ–∫."""
    logging.info(f"Submitting tool outputs for run {run_id} in thread {thread_id}: {tool_outputs}")
    response = client.beta.threads.runs.submit_tool_outputs(
        thread_id=thread_id,
        run_id=run_id,
        tool_outputs=tool_outputs
    )
    return response


async def run_assistant(client, thread_id, assistant_id, user_id, context):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç—ã."""
    logging.info(f"Running assistant {assistant_id} on thread {thread_id}")
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id,
        truncation_strategy={
            "type": "last_messages",
            "last_messages": 8
        },
    )

    iteration = 0
    while True:
        iteration += 1
        if iteration > 30:
            general_logger.error(f"Run for thread {thread_id} exceeded 30 iterations, cancelling.")
            try:
                client.beta.threads.runs.cancel(thread_id=thread_id, run_id=run.id)
            except Exception as e:
                general_logger.error(f"Error cancelling run: {e}")
            return [{"error": "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}]
        await asyncio.sleep(3)
        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        general_logger.info(f"Iteration {iteration}: Run status: {run.status}")

        if run.status in ["queued", "in_progress"]:
            general_logger.info(f"Run still in progress (iteration {iteration}), waiting...")
            continue
        elif run.status == "requires_action":
            general_logger.warning(f"Run requires action: {run.required_action}")
            tool_calls = run.required_action.submit_tool_outputs.tool_calls
            general_logger.info(f"Processing {len(tool_calls)} tool calls")
            tool_outputs = []
            for tool_call in tool_calls:
                function_name = tool_call.function.name
                arguments = json.loads(tool_call.function.arguments)
                general_logger.info(f"Executing tool: {function_name} with args: {arguments}")
                
                if function_name == "sell_item":
                    result = handle_sell_item(
                        user_id,
                        arguments["description"],
                        arguments["details"],
                        arguments["cost"],
                        int(arguments["category_id"]),
                        arguments.get("cost_name", "—à—Ç—É–∫–∞—Ä–∏–∫–∏")
                    )
                elif function_name == "buy_item":
                    result = handle_buy_item(
                        user_id,
                        int(arguments["category_id"]),
                        arguments["item_id"]
                    )
                elif function_name == "get_items_for_category":
                    result = handle_show_items(int(arguments["category_id"]))
                elif function_name == "get_purchased_items":
                    result = handle_get_purchased_items(user_id)
                elif function_name == "get_categories_with_counts":
                    result = get_categories_with_counts()
                elif function_name == "show_category_to_user":
                    result = await show_category_to_user(int(arguments["category_id"]), user_id, context)
                elif function_name == "get_random_info_about_world":
                    result = get_random_info_about_world()
                else:
                    result = "Unknown function call."

                general_logger.info(f"Tool {function_name} result: {result}")
                tool_outputs.append({
                    "tool_call_id": tool_call.id,
                    "output": json.dumps(result, ensure_ascii=False)
                })
            submit_tool_outputs(client, thread_id, run.id, tool_outputs)

        elif run.status in ["cancelling", "cancelled", "failed", "incomplete", "expired"]:
            general_logger.error(f"Run ended with status: {run.status}")
            if hasattr(run, 'last_error') and run.last_error:
                general_logger.error(f"Last error: {run.last_error}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        elif run.status == "completed":
            general_logger.info(f"Run completed successfully after {iteration} iterations")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            messages = client.beta.threads.messages.list(thread_id=thread_id).data
            general_logger.info(f"Retrieved {len(messages)} messages from thread")
            for i, msg in enumerate(messages):
                general_logger.info(f"Message {i+1}: role={msg.role}, content_type={type(msg.content)}")
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å –∫–æ–Ω—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ user
            assistant_msgs = []
            for msg in messages:
                if msg.role == "assistant":
                    assistant_msgs.append(msg)
                elif msg.role == "user":
                    break
            # –û—Ç–ø—Ä–∞–≤–∏–º –∏—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
            assistant_msgs = list(reversed(assistant_msgs))
            return assistant_msgs
    return []


# ------------------------------------------------------------------------------
# Handlers –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
# ------------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if not user:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return WAITING_FOR_NAME
    else:
        user_logger = get_user_logger(chat_id, user["name"])
        user_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']}!",
            parse_mode='HTML'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ç–æ–∫ (thread_id)
        client = context.application.bot_data["openai_client"]
        if not user.get("thread_id"):
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            thread = client.beta.threads.create()
            user["thread_id"] = thread.id
            save_data(USERS_FILE, users)
            user_logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (thread) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await update.message.reply_text("–°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (thread) –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode='HTML')
        else:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
            try:
                thread = client.beta.threads.retrieve(thread_id=user["thread_id"])
                user_logger.info("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ—Ç–æ–∫–µ")
                await update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ—Ç–æ–∫–µ.", parse_mode='HTML')
            except Exception as e:
                general_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫: {e}")
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                thread = client.beta.threads.create()
                user["thread_id"] = thread.id
                save_data(USERS_FILE, users)
                user_logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ")
                await update.message.reply_text("–°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", parse_mode='HTML')

        # –í—ã–≤–æ–¥–∏–º –±–∞–ª–∞–Ω—Å
        await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü—Ä–∏–≤–µ—Ç, —è –ú–µ–Ω—è–ª–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—è–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—ë –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å. –ê –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä.", parse_mode='HTML')
        return ConversationHandler.END


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = str(update.effective_chat.id)
    name = update.message.text.strip()
    
    if len(name) < 2:
        await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode='HTML')
        return WAITING_FOR_NAME
    
    user = create_user(chat_id, name)
    user_logger = get_user_logger(chat_id, name)
    user_logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {name}")
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {name}! –Ø —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        parse_mode='HTML'
    )
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    client = context.application.bot_data["openai_client"]
    thread = client.beta.threads.create()
    user["thread_id"] = thread.id
    save_data(USERS_FILE, users)
    user_logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (thread) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await update.message.reply_text("–°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ (thread) –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode='HTML')
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤.", parse_mode='HTML')
    
    return ConversationHandler.END


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)."""
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start", parse_mode='HTML')
        return

    user_logger = get_user_logger(chat_id, user["name"])
    user_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")

    client = context.application.bot_data["openai_client"]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ç–æ–∫
    add_message_to_thread(
        client=client,
        thread_id=user["thread_id"],
        role="user",
        content=update.message.text,
        user_id=chat_id
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    user_logger.info("–ó–∞–ø—É—Å–∫–∞—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    messages = await run_assistant(
        client=client,
        thread_id=user["thread_id"],
        assistant_id=ASSISTANT_ID,
        user_id=chat_id,
        context=context
    )

    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    user_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    if not messages:
        user_logger.warning("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        await update.message.reply_text("‚ùå –û–®–ò–ë–ö–ê: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", parse_mode='HTML')
        return

    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π
    if isinstance(messages, list) and len(messages) == 1 and isinstance(messages[0], dict) and "error" in messages[0]:
        user_logger.error(messages[0]["error"])
        await update.message.reply_text(messages[0]["error"], parse_mode='HTML')
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
    for msg in messages:
        user_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {msg.content}...")
        text = str(msg.content)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º **–∂–∏—Ä–Ω—ã–π** –≤ <b>–∂–∏—Ä–Ω—ã–π</b> –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        await update.message.reply_text(text, parse_mode='HTML')


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode='HTML')


# ------------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ------------------------------------------------------------------------------
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--api_key", required=True, help="OpenAI API Key")
    parser.add_argument("--telegram_token", required=True, help="Telegram Bot Token")
    args = parser.parse_args()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
    openai_client = OpenAI(api_key=args.api_key)

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = (
        ApplicationBuilder()
        .token(args.telegram_token)
        .build()
    )

    # –í bot_data —Å–ª–æ–∂–∏–º –Ω–∞—à openai_client, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    application.bot_data["openai_client"] = openai_client

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
        },
        fallbacks=[CommandHandler("start", cmd_start)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(conv_handler)
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text_message))
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()

